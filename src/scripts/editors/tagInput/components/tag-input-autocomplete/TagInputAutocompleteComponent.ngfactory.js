/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('./TagInputAutocompleteComponent');
var import4 = require('@angular/core/src/linker/view_utils');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('@angular/core/src/linker/element_ref');
var import9 = require('@angular/core/src/metadata/view');
var import10 = require('@angular/core/src/linker/component_factory');
var import11 = require('./styles.scss.shim');
var import12 = require('@angular/common/src/directives/ng_for');
var import13 = require('@angular/core/src/linker/template_ref');
var import14 = require('@angular/core/src/change_detection/differs/iterable_differs');
var import15 = require('@angular/common/src/directives/ng_class');
var import16 = require('@angular/core/src/change_detection/differs/keyvalue_differs');
var renderType_TagInputAutocompleteComponent_Host = null;
var _View_TagInputAutocompleteComponent_Host0 = (function (_super) {
    __extends(_View_TagInputAutocompleteComponent_Host0, _super);
    function _View_TagInputAutocompleteComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TagInputAutocompleteComponent_Host0, renderType_TagInputAutocompleteComponent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TagInputAutocompleteComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('rl-tag-input-autocomplete', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_TagInputAutocompleteComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TagInputAutocompleteComponent_0_4 = new import3.TagInputAutocompleteComponent(new import8.ElementRef(this._el_0));
        this._appEl_0.initComponent(this._TagInputAutocompleteComponent_0_4, [], compView_0);
        compView_0.create(this._TagInputAutocompleteComponent_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_TagInputAutocompleteComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.TagInputAutocompleteComponent) && (0 === requestNodeIndex))) {
            return this._TagInputAutocompleteComponent_0_4;
        }
        return notFoundResult;
    };
    _View_TagInputAutocompleteComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._TagInputAutocompleteComponent_0_4.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_TagInputAutocompleteComponent_Host0.prototype.destroyInternal = function () {
        this._TagInputAutocompleteComponent_0_4.ngOnDestroy();
    };
    return _View_TagInputAutocompleteComponent_Host0;
}(import1.AppView));
function viewFactory_TagInputAutocompleteComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TagInputAutocompleteComponent_Host === null)) {
        (renderType_TagInputAutocompleteComponent_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_TagInputAutocompleteComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.TagInputAutocompleteComponentNgFactory = new import10.ComponentFactory('rl-tag-input-autocomplete', viewFactory_TagInputAutocompleteComponent_Host0, import3.TagInputAutocompleteComponent);
var styles_TagInputAutocompleteComponent = [import11.styles];
var renderType_TagInputAutocompleteComponent = null;
var _View_TagInputAutocompleteComponent0 = (function (_super) {
    __extends(_View_TagInputAutocompleteComponent0, _super);
    function _View_TagInputAutocompleteComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TagInputAutocompleteComponent0, renderType_TagInputAutocompleteComponent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TagInputAutocompleteComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._anchor_0);
        this._TemplateRef_0_5 = new import13.TemplateRef_(this._appEl_0, viewFactory_TagInputAutocompleteComponent1);
        this._NgFor_0_6 = new import12.NgFor(this._appEl_0.vcRef, this._TemplateRef_0_5, this.parentInjector.get(import14.IterableDiffers), this.ref);
        this._expr_0 = import7.UNINITIALIZED;
        this.init([], [this._anchor_0], [], []);
        return null;
    };
    _View_TagInputAutocompleteComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_5;
        }
        if (((token === import12.NgFor) && (0 === requestNodeIndex))) {
            return this._NgFor_0_6;
        }
        return notFoundResult;
    };
    _View_TagInputAutocompleteComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var changes = null;
        changes = null;
        var currVal_0 = this.context.items;
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._NgFor_0_6.ngForOf = currVal_0;
            if ((changes === null)) {
                (changes = {});
            }
            changes['ngForOf'] = new import7.SimpleChange(this._expr_0, currVal_0);
            this._expr_0 = currVal_0;
        }
        if ((changes !== null)) {
            this._NgFor_0_6.ngOnChanges(changes);
        }
        if (!throwOnChange) {
            this._NgFor_0_6.ngDoCheck();
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_TagInputAutocompleteComponent0;
}(import1.AppView));
function viewFactory_TagInputAutocompleteComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TagInputAutocompleteComponent === null)) {
        (renderType_TagInputAutocompleteComponent = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.Emulated, styles_TagInputAutocompleteComponent, {}));
    }
    return new _View_TagInputAutocompleteComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_TagInputAutocompleteComponent0 = viewFactory_TagInputAutocompleteComponent0;
var _View_TagInputAutocompleteComponent1 = (function (_super) {
    __extends(_View_TagInputAutocompleteComponent1, _super);
    function _View_TagInputAutocompleteComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TagInputAutocompleteComponent1, renderType_TagInputAutocompleteComponent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TagInputAutocompleteComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'rl-autocomplete-item');
        this._NgClass_0_3 = new import15.NgClass(this.parentInjector.get(import14.IterableDiffers), this.parentInjector.get(import16.KeyValueDiffers), new import8.ElementRef(this._el_0), this.renderer);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        var disposable_0 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_0.bind(this)));
        this._expr_1 = import7.UNINITIALIZED;
        this._map_0 = import4.pureProxy1(function (p0) {
            return { 'is-selected': p0 };
        });
        this._expr_2 = import7.UNINITIALIZED;
        this._expr_3 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._text_1
        ], [disposable_0], []);
        return null;
    };
    _View_TagInputAutocompleteComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import15.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._NgClass_0_3;
        }
        return notFoundResult;
    };
    _View_TagInputAutocompleteComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1 = 'rl-autocomplete-item';
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._NgClass_0_3.klass = currVal_1;
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this._map_0((this.parent.context.selectedItemIndex === this.context.index));
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this._NgClass_0_3.ngClass = currVal_2;
            this._expr_2 = currVal_2;
        }
        if (!throwOnChange) {
            this._NgClass_0_3.ngDoCheck();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_3 = import4.interpolate(1, '\n  ', this.context.$implicit, '\n');
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setText(this._text_1, currVal_3);
            this._expr_3 = currVal_3;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_TagInputAutocompleteComponent1.prototype._handle_click_0_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.parent.context.selectItem(this.context.index) !== false);
        return (true && pd_0);
    };
    return _View_TagInputAutocompleteComponent1;
}(import1.AppView));
function viewFactory_TagInputAutocompleteComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_TagInputAutocompleteComponent1(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=TagInputAutocompleteComponent.ngfactory.js.map
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './TagInputAutocompleteComponent';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './styles.scss.shim';
import * as import12 from '@angular/common/src/directives/ng_for';
import * as import13 from '@angular/core/src/linker/template_ref';
import * as import14 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import15 from '@angular/common/src/directives/ng_class';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
var renderType_TagInputAutocompleteComponent_Host:import0.RenderComponentType = (null as any);
class _View_TagInputAutocompleteComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _TagInputAutocompleteComponent_0_4:import3.TagInputAutocompleteComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_TagInputAutocompleteComponent_Host0,renderType_TagInputAutocompleteComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('rl-tag-input-autocomplete',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_TagInputAutocompleteComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._TagInputAutocompleteComponent_0_4 = new import3.TagInputAutocompleteComponent(new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._TagInputAutocompleteComponent_0_4,[],compView_0);
    compView_0.create(this._TagInputAutocompleteComponent_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.TagInputAutocompleteComponent) && (0 === requestNodeIndex))) { return this._TagInputAutocompleteComponent_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._TagInputAutocompleteComponent_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._TagInputAutocompleteComponent_0_4.ngOnDestroy();
  }
}
function viewFactory_TagInputAutocompleteComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_TagInputAutocompleteComponent_Host === (null as any))) { (renderType_TagInputAutocompleteComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_TagInputAutocompleteComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const TagInputAutocompleteComponentNgFactory:import10.ComponentFactory<import3.TagInputAutocompleteComponent> = new import10.ComponentFactory<import3.TagInputAutocompleteComponent>('rl-tag-input-autocomplete',viewFactory_TagInputAutocompleteComponent_Host0,import3.TagInputAutocompleteComponent);
const styles_TagInputAutocompleteComponent:any[] = [import11.styles];
var renderType_TagInputAutocompleteComponent:import0.RenderComponentType = (null as any);
class _View_TagInputAutocompleteComponent0 extends import1.AppView<import3.TagInputAutocompleteComponent> {
  _anchor_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _TemplateRef_0_5:any;
  _NgFor_0_6:import12.NgFor;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_TagInputAutocompleteComponent0,renderType_TagInputAutocompleteComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._anchor_0);
    this._TemplateRef_0_5 = new import13.TemplateRef_(this._appEl_0,viewFactory_TagInputAutocompleteComponent1);
    this._NgFor_0_6 = new import12.NgFor(this._appEl_0.vcRef,this._TemplateRef_0_5,this.parentInjector.get(import14.IterableDiffers),this.ref);
    this._expr_0 = import7.UNINITIALIZED;
    this.init([],[this._anchor_0],[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.TemplateRef) && (0 === requestNodeIndex))) { return this._TemplateRef_0_5; }
    if (((token === import12.NgFor) && (0 === requestNodeIndex))) { return this._NgFor_0_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import7.SimpleChange} = (null as any);
    changes = (null as any);
    const currVal_0:any = this.context.items;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgFor_0_6.ngForOf = currVal_0;
      if ((changes === (null as any))) { (changes = {}); }
      changes['ngForOf'] = new import7.SimpleChange(this._expr_0,currVal_0);
      this._expr_0 = currVal_0;
    }
    if ((changes !== (null as any))) { this._NgFor_0_6.ngOnChanges(changes); }
    if (!throwOnChange) { this._NgFor_0_6.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_TagInputAutocompleteComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.TagInputAutocompleteComponent> {
  if ((renderType_TagInputAutocompleteComponent === (null as any))) { (renderType_TagInputAutocompleteComponent = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.Emulated,styles_TagInputAutocompleteComponent,{})); }
  return new _View_TagInputAutocompleteComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_TagInputAutocompleteComponent1 extends import1.AppView<any> {
  _el_0:any;
  _NgClass_0_3:import15.NgClass;
  _text_1:any;
  /*private*/ _expr_1:any;
  _map_0:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_TagInputAutocompleteComponent1,renderType_TagInputAutocompleteComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','rl-autocomplete-item');
    this._NgClass_0_3 = new import15.NgClass(this.parentInjector.get(import14.IterableDiffers),this.parentInjector.get(import16.KeyValueDiffers),new import8.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'click',this.eventHandler(this._handle_click_0_0.bind(this)));
    this._expr_1 = import7.UNINITIALIZED;
    this._map_0 = import4.pureProxy1((p0:any):{[key: string]:any} => {
      return {'is-selected': p0};
    });
    this._expr_2 = import7.UNINITIALIZED;
    this._expr_3 = import7.UNINITIALIZED;
    this.init([].concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,[disposable_0],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgClass_0_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1:any = 'rl-autocomplete-item';
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._NgClass_0_3.klass = currVal_1;
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this._map_0((this.parent.context.selectedItemIndex === this.context.index));
    if (import4.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this._NgClass_0_3.ngClass = currVal_2;
      this._expr_2 = currVal_2;
    }
    if (!throwOnChange) { this._NgClass_0_3.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_3:any = import4.interpolate(1,'\n  ',this.context.$implicit,'\n');
    if (import4.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setText(this._text_1,currVal_3);
      this._expr_3 = currVal_3;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.selectItem(this.context.index)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_TagInputAutocompleteComponent1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_TagInputAutocompleteComponent1(viewUtils,parentInjector,declarationEl);
}
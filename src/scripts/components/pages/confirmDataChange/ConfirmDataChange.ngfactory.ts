/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './ConfirmDataChange';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/http/src/http';
import * as import9 from '../../../services/LocalizationService';
import * as import10 from '../../../services/UserInformationService';
import * as import11 from '@angular/router/src/router';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/component_factory';
var renderType_ConfirmDataChange_Host:import0.RenderComponentType = (null as any);
class _View_ConfirmDataChange_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _ConfirmDataChange_0_4:import3.ConfirmDataChange;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ConfirmDataChange_Host0,renderType_ConfirmDataChange_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('confirm-data-change',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ConfirmDataChange0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ConfirmDataChange_0_4 = new import3.ConfirmDataChange(this.parentInjector.get(import8.Http),this.parentInjector.get(import9.LocalizationService),this.parentInjector.get(import10.UserInformationService),this.parentInjector.get(import11.Router));
    this._appEl_0.initComponent(this._ConfirmDataChange_0_4,[],compView_0);
    compView_0.create(this._ConfirmDataChange_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.ConfirmDataChange) && (0 === requestNodeIndex))) { return this._ConfirmDataChange_0_4; }
    return notFoundResult;
  }
}
function viewFactory_ConfirmDataChange_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_ConfirmDataChange_Host === (null as any))) { (renderType_ConfirmDataChange_Host = viewUtils.createRenderComponentType('',0,import12.ViewEncapsulation.None,[],{})); }
  return new _View_ConfirmDataChange_Host0(viewUtils,parentInjector,declarationEl);
}
export const ConfirmDataChangeNgFactory:import13.ComponentFactory<import3.ConfirmDataChange> = new import13.ComponentFactory<import3.ConfirmDataChange>('confirm-data-change',viewFactory_ConfirmDataChange_Host0,import3.ConfirmDataChange);
const styles_ConfirmDataChange:any[] = [];
var renderType_ConfirmDataChange:import0.RenderComponentType = (null as any);
class _View_ConfirmDataChange0 extends import1.AppView<import3.ConfirmDataChange> {
  _el_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ConfirmDataChange0,renderType_ConfirmDataChange,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.init([],[this._el_0],[],[]);
    return (null as any);
  }
}
export function viewFactory_ConfirmDataChange0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.ConfirmDataChange> {
  if ((renderType_ConfirmDataChange === (null as any))) { (renderType_ConfirmDataChange = viewUtils.createRenderComponentType('',0,import12.ViewEncapsulation.None,styles_ConfirmDataChange,{})); }
  return new _View_ConfirmDataChange0(viewUtils,parentInjector,declarationEl);
}